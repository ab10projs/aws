1) HTML: Display page elements
2) CSS: Styles elements
3) Bootstrap: automatic styling with JS
4) Jinja templates grab information from Python and Flask and send it to frontend HTML
5) Flask is web framework
6) Flask renders web pages, can edit them with Jinja, and can communicate with database

7) Flask BASIC
7.1) from flask import Flask   				# From flask package import Flask class
7.2) app = Flask(__name__)     				# Creates an instance(app) of Flask class and passes predefined varable
							# name of the module in which it is used. Flask uses the location of 
							# module passed as starting point to load template files
7.3) @app.route('/')					# Meas the home page and the function index has this decorator

8) Basic Routes (adding multiple pages)
8.1) @app.route(TheStringParameterDeterminesTheURLExtensionThatWillLinkToFunction otherwise know as a view)
8.2) http://127.0.0.1:5000 is currently where the app is running
8.3) @app.route("/some_page")  means   http://127.0.0.1:5000/some_page
8.4) Once a page is deployed, 127.0.0.1 will be replaced by www.websitename.com

9) Dynamic route
------------CodeExample-----------------
@app.route('/info/<name>')
def info_name(name):
    return  '<h1>This is info for {}</h1>'.format(name)
------------CodeExample-----------------

10) Templates
10.1) Flask automatically looks for HTML templates in templates directory. So name the folder as templates ONLY
10.2) Large applications can be separated to have multiple template directories
10.3) There is a render_template function in flask.
10.4) Create a templates folder at the same level as the appflask.py file.
10.5) Create a base.html file and place it in a folder called templates. 
10.6 ) from flask import Flask , render_template   <---- Add this
10.7) Full code at this level
----------------- 10.7 Code--------------------
from flask import Flask , render_template
app = Flask(__name__)
@app.route('/')
def index():
    return render_template('base.html')

if __name__ == '__main__':
    app.run(debug= True)
    #app.run()  # for no debug

----------------- 10.7 Code--------------------
10.8) Create a static folder at the same level as templates and place an image
10.9) <img src ="../static/flowers.jpg">   <--- add this is the base.html file's body. 
 
11) Template Variables .. (Jinja templating)
11.1) Jinja templating lets us directly insert variables from Python code to html.
11.2)  {{ some_variable }}
11.3) We can pass strings, list, dictionaries and more into templates.
------ 11 code -----
@app.route('/')
def index():
    varstr = "Anupam"
    varlst = [10,12,13,1,4,1,2,44]
    vardict = {'K1':'val1', 'K2':'val2'}
    return render_template('base.html', vst=varstr, vlst= varlst, vdict= vardict )
--- below is in .html  ----
{{ vst }}
{{ vlst }}
{{ vdict }}
{{ vdict['K1'] }}
--- below is in .html  ----
------ 11 code -----

12 -- Template Control Flow
-----12 code ----
{%  for i in vdict.keys()  %}
<li>{{ i }}</li>
<li>{{ vdict[i] }}</li>
{% endfor %}
-----12 code ----

13) Control and Filter
--- 13 Code ---
<body>
	<h1>Basic Variable {{ vst }}</h1>
	<h2> Dictonary {{ vdict }} </h2>
	{%  for i in  vdict.keys() %}
	<h1>Capitalize {{ vdict[i]|upper  }}</h1>
	{% endfor %}
	{% if 'val12' in vdict.values()  %}
	<h2>"val1 found"</h2>
	{% else %}
	<h2>"val1 NOT FOUD"</h2>
	{% endif %}
</body>
--- 13 Code --- 

14 url_for()   <-- This is a helper function
14.1) {{ url_for('MentionFunctionNameHere') }}
14.2) <a class="navbar-brand" href="{{ url_for('static',filename='flowers.jpg')}}">Image</a>       <--- links image in Navbar

15 
Template Forms
15.1) Add request also to be imported from Flask as   --> from flask import Flask , render_template, request
16 flask_wtf and wtforms
16.1) configure a secret key
16.2) create WTForm class
  16.2.1) create fields for each part of form
16.3) Setup a view Fn
  16.3.1) Add method= ['GET','POST']
  16.3.2) Create instance of form class
  16.3.3) Handle form submission
17) In the first example, the forms are created in same file as views, later there will be separate file for Forms.




